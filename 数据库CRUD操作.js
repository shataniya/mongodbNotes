/*
    向数据库中添加文档
        db.<collections>.insert() - 向集合中添加一个或者多个文档
        - 当我们向集合中插入文档时，如果没有给文档指定 _id属性，则数据库会自动为添加 _id属性，该属性用来作为文档的唯一标识
*/

// 使用 MongoDB Manage 

// 使用 ObjectId() 可以产生一个时间戳 这个可以作为数据的唯一标识

// 这个 _id属性 也可以指定

// 添加文档的方法：
// 1. insert() 可以添加 单一 或者 多个文档
// 2. insertOne() 只可以添加一个文档
// 3. insertMany() 添加多个文档  注意：添加多个文档的时候要使用数组的方式添加

// 查询的方法：
// 1. db.<collections>.find()
    // - find() 用来 查询 集合 中所有 符合条件的文档
    // - find() 可以接受一个对象作为条件参数
        // - {} 表示查询的集合中所有的文档
        // - { 属性:值 } 查询属性是 指定值的 文档
    // 因此 find() 返回的就是 一个数组

// 2. db.<collections>.findOne() 查询集合中符合条件的第一个文档
    // - findOne() 返回的是一个 文档对象

// 3. db.<cocllections>.find().count() 查询所有结果的数量

// 修改的方法：
// 1. db.<collections>.update(查询条件,新对象)
    // - update() 默认情况下会使用 新对象 替换 旧对象
    // - 如果修改的指定的属性，而不是 替换，需要使用 修改操作符 来完成修改
        // - $set   可以用来 修改 指定的属性，或者添加属性
        // - $unset   可以用来 删除 指定属性
    // - update() 默认只会修改一个，如果出现多个符合条件，那么就修改第一个

// 2. db.<collections>.updateMany()
    // - 把符合条件的所有集合全都改了


// 删除文档的方法：
// 1. db.<collections>.remove()
    // - 使用一个对象作为参数，和 find() 传递参数的方式 一样
    // - 默认是 删除 符合条件的所有文档
    // - 如果想改变为只删除一个，就把 第二个参数 设置为 true
    // - 如果只传递一个 空对象 作为参数，那么就会删除所有的文档，相当于清空集合
// 2. db.<collections>.deleteOne()
    // - 只能删除一个文档，如果有多个，就删除符合条件的第一个文档
// 3. db.<collections>.deleteMany()
    // - 删除多个文档，删除符合条件的所有文档，和默认时的 remove 一样

// 4. db.<collections>.drop()
    // - 删除集合

// 5. db.dropDatabase() 
    // - 删除数据库

// 注意：如果删除的是数据库中最后的集合，或者说删除最后的文档，那么这个数据库也一样被删除了

// 注意：数据库中的数据一般不会删除，还会保留，因此 remove deleteOne deleteMany 方法很少被调用
